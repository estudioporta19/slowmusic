(function(f) {
    if (typeof exports === "object" && typeof module !== "undefined") {
        module.exports = f();
    } else if (typeof define === "function" && define.amd) {
        define([], f);
    } else {
        var g;
        if (typeof window !== "undefined") {
            g = window;
        } else if (typeof global !== "undefined") {
            g = global;
        } else if (typeof self !== "undefined") {
            g = self;
        } else {
            g = this;
        }
        g.DetectBPM = f();
    }
})(function() {
    var define, module, exports;
    return (function() {
        function r(e, n, t) {
            function o(i, f) {
                if (!n[i]) {
                    if (!e[i]) {
                        var c = typeof require === "function" && require;
                        if (!f && c) return c(i, true);
                        if (u) return u(i, true);
                        var a = new Error("Cannot find module '" + i + "'");
                        a.code = "MODULE_NOT_FOUND";
                        throw a;
                    }
                    var p = n[i] = { exports: {} };
                    e[i][0].call(p.exports, function(r) {
                        var n = e[i][1][r];
                        return o(n || r);
                    }, p, p.exports, r, e, n, t);
                }
                return n[i].exports;
            }

            for (var u = typeof require === "function" && require, i = 0; i < t.length; i++)
                o(t[i]);

            return o;
        }
        return r;
    })()({
        1: [function(require, module, exports) {
            "use strict";
            Object.defineProperty(exports, "__esModule", { value: true });
            exports.default = detect;

            var OfflineContext = window.OfflineAudioContext || window.webkitOfflineAudioContext;

            function detect(buffer) {
                var source = getLowPassSource(buffer);
                source.start(0);

                return [findPeaks, identifyIntervals, groupByTempo(buffer.sampleRate), getTopCandidate]
                    .reduce(function(state, fn) {
                        return fn(state);
                    }, source.buffer.getChannelData(0));
            }

            function getTopCandidate(candidates) {
                return candidates.sort((a, b) => b.count - a.count).splice(0, 5)[0].tempo;
            }

            function getLowPassSource(buffer) {
                var length = buffer.length;
                var numberOfChannels = buffer.numberOfChannels;
                var sampleRate = buffer.sampleRate;

                var context = new OfflineContext(numberOfChannels, length, sampleRate);
                var source = context.createBufferSource();
                source.buffer = buffer;

                var filter = context.createBiquadFilter();
                filter.type = "lowpass";

                source.connect(filter);
                filter.connect(context.destination);

                return source;
            }

            function findPeaks(data) {
                var peaks = [];
                var threshold = 0.9;
                var minThresold = 0.3;
                var minPeaks = 15;

                while (peaks.length < minPeaks && threshold >= minThresold) {
                    peaks = findPeaksAtThreshold(data, threshold);
                    threshold -= 0.05;
                }

                if (peaks.length < minPeaks) {
                    throw new Error("Could not find enough samples for a reliable detection.");
                }

                return peaks;
            }

            function findPeaksAtThreshold(data, threshold) {
                var peaks = [];

                for (var i = 0, l = data.length; i < l; i += 1) {
                    if (data[i] > threshold) {
                        peaks.push(i);
                        i += 10000; // skip ahead to avoid nearby peaks
                    }
                }

                return peaks;
            }

            function identifyIntervals(peaks) {
                var intervals = [];

                peaks.forEach(function(peak, index) {
                    for (var i = 0; i < 10; i += 1) {
                        var nextIndex = index + i;
                        if (nextIndex >= peaks.length) break;

                        var interval = peaks[nextIndex] - peak;
                        if (interval <= 0) continue;

                        var foundInterval = intervals.some(function(intervalCount) {
                            if (intervalCount.interval === interval) {
                                intervalCount.count += 1;
                                return true;
                            }
                        });

                        if (!foundInterval) {
                            intervals.push({ interval: interval, count: 1 });
                        }
                    }
                });

                return intervals;
            }

            function groupByTempo(sampleRate) {
                return function(intervalCounts) {
                    var tempoCounts = [];

                    intervalCounts.forEach(function(intervalCount) {
                        if (intervalCount.interval !== 0) {
                            var theoreticalTempo = 60 / (intervalCount.interval / sampleRate);

                            while (theoreticalTempo < 70) {
                                theoreticalTempo *= 2;
                            }
                            while (theoreticalTempo > 140) {
                                theoreticalTempo /= 2;
                            }

                            theoreticalTempo = Math.round(theoreticalTempo);

                            var foundTempo = tempoCounts.some(function(tempoCount) {
                                if (tempoCount.tempo === theoreticalTempo) {
                                    tempoCount.count += intervalCount.count;
                                    return true;
                                }
                            });

                            if (!foundTempo) {
                                tempoCounts.push({
                                    tempo: theoreticalTempo,
                                    count: intervalCount.count
                                });
                            }
                        }
                    });

                    return tempoCounts;
                };
            }
        }, {}],

        2: [function(require, module, exports) {
            module.exports = require("./detect").default;
        }, { "./detect": 1 }]
    }, {}, [2])(2);
});
